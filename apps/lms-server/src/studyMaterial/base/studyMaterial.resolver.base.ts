/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StudyMaterial } from "./StudyMaterial";
import { StudyMaterialCountArgs } from "./StudyMaterialCountArgs";
import { StudyMaterialFindManyArgs } from "./StudyMaterialFindManyArgs";
import { StudyMaterialFindUniqueArgs } from "./StudyMaterialFindUniqueArgs";
import { CreateStudyMaterialArgs } from "./CreateStudyMaterialArgs";
import { UpdateStudyMaterialArgs } from "./UpdateStudyMaterialArgs";
import { DeleteStudyMaterialArgs } from "./DeleteStudyMaterialArgs";
import { CourseFindManyArgs } from "../../course/base/CourseFindManyArgs";
import { Course } from "../../course/base/Course";
import { StudyMaterialService } from "../studyMaterial.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StudyMaterial)
export class StudyMaterialResolverBase {
  constructor(
    protected readonly service: StudyMaterialService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StudyMaterial",
    action: "read",
    possession: "any",
  })
  async _studyMaterialsMeta(
    @graphql.Args() args: StudyMaterialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StudyMaterial])
  @nestAccessControl.UseRoles({
    resource: "StudyMaterial",
    action: "read",
    possession: "any",
  })
  async studyMaterials(
    @graphql.Args() args: StudyMaterialFindManyArgs
  ): Promise<StudyMaterial[]> {
    return this.service.studyMaterials(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StudyMaterial, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StudyMaterial",
    action: "read",
    possession: "own",
  })
  async studyMaterial(
    @graphql.Args() args: StudyMaterialFindUniqueArgs
  ): Promise<StudyMaterial | null> {
    const result = await this.service.studyMaterial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StudyMaterial)
  @nestAccessControl.UseRoles({
    resource: "StudyMaterial",
    action: "create",
    possession: "any",
  })
  async createStudyMaterial(
    @graphql.Args() args: CreateStudyMaterialArgs
  ): Promise<StudyMaterial> {
    return await this.service.createStudyMaterial({
      ...args,
      data: {
        ...args.data,

        course: args.data.course
          ? {
              connect: args.data.course,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StudyMaterial)
  @nestAccessControl.UseRoles({
    resource: "StudyMaterial",
    action: "update",
    possession: "any",
  })
  async updateStudyMaterial(
    @graphql.Args() args: UpdateStudyMaterialArgs
  ): Promise<StudyMaterial | null> {
    try {
      return await this.service.updateStudyMaterial({
        ...args,
        data: {
          ...args.data,

          course: args.data.course
            ? {
                connect: args.data.course,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StudyMaterial)
  @nestAccessControl.UseRoles({
    resource: "StudyMaterial",
    action: "delete",
    possession: "any",
  })
  async deleteStudyMaterial(
    @graphql.Args() args: DeleteStudyMaterialArgs
  ): Promise<StudyMaterial | null> {
    try {
      return await this.service.deleteStudyMaterial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Course], { name: "courses" })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async findCourses(
    @graphql.Parent() parent: StudyMaterial,
    @graphql.Args() args: CourseFindManyArgs
  ): Promise<Course[]> {
    const results = await this.service.findCourses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Course, {
    nullable: true,
    name: "course",
  })
  @nestAccessControl.UseRoles({
    resource: "Course",
    action: "read",
    possession: "any",
  })
  async getCourse(
    @graphql.Parent() parent: StudyMaterial
  ): Promise<Course | null> {
    const result = await this.service.getCourse(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
