/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PersonalAssistance } from "./PersonalAssistance";
import { PersonalAssistanceCountArgs } from "./PersonalAssistanceCountArgs";
import { PersonalAssistanceFindManyArgs } from "./PersonalAssistanceFindManyArgs";
import { PersonalAssistanceFindUniqueArgs } from "./PersonalAssistanceFindUniqueArgs";
import { CreatePersonalAssistanceArgs } from "./CreatePersonalAssistanceArgs";
import { UpdatePersonalAssistanceArgs } from "./UpdatePersonalAssistanceArgs";
import { DeletePersonalAssistanceArgs } from "./DeletePersonalAssistanceArgs";
import { Student } from "../../student/base/Student";
import { PersonalAssistanceService } from "../personalAssistance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PersonalAssistance)
export class PersonalAssistanceResolverBase {
  constructor(
    protected readonly service: PersonalAssistanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PersonalAssistance",
    action: "read",
    possession: "any",
  })
  async _personalAssistancesMeta(
    @graphql.Args() args: PersonalAssistanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PersonalAssistance])
  @nestAccessControl.UseRoles({
    resource: "PersonalAssistance",
    action: "read",
    possession: "any",
  })
  async personalAssistances(
    @graphql.Args() args: PersonalAssistanceFindManyArgs
  ): Promise<PersonalAssistance[]> {
    return this.service.personalAssistances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PersonalAssistance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PersonalAssistance",
    action: "read",
    possession: "own",
  })
  async personalAssistance(
    @graphql.Args() args: PersonalAssistanceFindUniqueArgs
  ): Promise<PersonalAssistance | null> {
    const result = await this.service.personalAssistance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PersonalAssistance)
  @nestAccessControl.UseRoles({
    resource: "PersonalAssistance",
    action: "create",
    possession: "any",
  })
  async createPersonalAssistance(
    @graphql.Args() args: CreatePersonalAssistanceArgs
  ): Promise<PersonalAssistance> {
    return await this.service.createPersonalAssistance({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PersonalAssistance)
  @nestAccessControl.UseRoles({
    resource: "PersonalAssistance",
    action: "update",
    possession: "any",
  })
  async updatePersonalAssistance(
    @graphql.Args() args: UpdatePersonalAssistanceArgs
  ): Promise<PersonalAssistance | null> {
    try {
      return await this.service.updatePersonalAssistance({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PersonalAssistance)
  @nestAccessControl.UseRoles({
    resource: "PersonalAssistance",
    action: "delete",
    possession: "any",
  })
  async deletePersonalAssistance(
    @graphql.Args() args: DeletePersonalAssistanceArgs
  ): Promise<PersonalAssistance | null> {
    try {
      return await this.service.deletePersonalAssistance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  @nestAccessControl.UseRoles({
    resource: "Student",
    action: "read",
    possession: "any",
  })
  async getStudent(
    @graphql.Parent() parent: PersonalAssistance
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
